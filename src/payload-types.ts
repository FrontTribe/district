/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    tenants: Tenant;
    pages: Page;
    menu: Menu;
    footer: Footer;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    menu: MenuSelect<false> | MenuSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: 'en' | 'hr' | 'de';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * Manage user accounts and permissions
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'superadmin' | 'tenant-admin';
  tenant?: (string | null) | Tenant;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * Manage tenant organizations (hotels, restaurants, etc.)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: string;
  name: string;
  subdomain: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage images, documents and other media files
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  tenant?: (string | null) | Tenant;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * Manage pages for tenants and main domain
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  slug: string;
  tenant?: (string | null) | Tenant;
  layout?:
    | (
        | {
            blocks?:
              | (
                  | {
                      heading: string;
                      subheading?: string | null;
                      backgroundMedia?: {
                        type?: ('none' | 'image' | 'video') | null;
                        image?: (string | null) | Media;
                        video?: (string | null) | Media;
                        overlay?: ('none' | 'light' | 'medium' | 'dark') | null;
                      };
                      /**
                       * Optional ID for this section (used for menu navigation)
                       */
                      sectionId?: string | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'hero';
                    }
                  | {
                      heading?: string | null;
                      features?:
                        | {
                            title?: string | null;
                            description?: string | null;
                            id?: string | null;
                          }[]
                        | null;
                      /**
                       * Optional ID for this section (used for menu navigation)
                       */
                      sectionId?: string | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'features';
                    }
                  | {
                      heading: string;
                      content: {
                        root: {
                          type: string;
                          children: {
                            type: string;
                            version: number;
                            [k: string]: unknown;
                          }[];
                          direction: ('ltr' | 'rtl') | null;
                          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                          indent: number;
                          version: number;
                        };
                        [k: string]: unknown;
                      };
                      /**
                       * Optional ID for this section (used for menu navigation)
                       */
                      sectionId?: string | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'text';
                    }
                  | {
                      columns?:
                        | {
                            title: string;
                            subtitle?: string | null;
                            /**
                             * Optional background image for this column
                             */
                            backgroundImage?: (string | null) | Media;
                            /**
                             * Make this column take the full viewport height
                             */
                            fullHeight?: boolean | null;
                            /**
                             * Optional gradient overlay for this column
                             */
                            gradient?: {
                              enabled?: boolean | null;
                              type?: ('linear' | 'radial') | null;
                              direction?:
                                | (
                                    | 'to-bottom'
                                    | 'to-top'
                                    | 'to-right'
                                    | 'to-left'
                                    | 'to-bottom-right'
                                    | 'to-bottom-left'
                                    | 'to-top-right'
                                    | 'to-top-left'
                                  )
                                | null;
                              position?:
                                | (
                                    | 'center'
                                    | 'top'
                                    | 'bottom'
                                    | 'left'
                                    | 'right'
                                    | 'top-left'
                                    | 'top-right'
                                    | 'bottom-left'
                                    | 'bottom-right'
                                  )
                                | null;
                              /**
                               * Hex color code (e.g., #000000)
                               */
                              startColor?: string | null;
                              /**
                               * Hex color code (e.g., #ffffff)
                               */
                              endColor?: string | null;
                              /**
                               * Gradient opacity (0 = transparent, 1 = opaque)
                               */
                              opacity?: number | null;
                            };
                            link: {
                              url: string;
                              text: string;
                              openInNewTab?: boolean | null;
                            };
                            /**
                             * Optional social network links for this column
                             */
                            socialNetworks?: {
                              /**
                               * Full Facebook profile or page URL
                               */
                              facebook?: string | null;
                              /**
                               * Full Instagram profile URL
                               */
                              instagram?: string | null;
                            };
                            id?: string | null;
                          }[]
                        | null;
                      /**
                       * Optional ID for this section (used for menu navigation)
                       */
                      sectionId?: string | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'three-columns';
                    }
                  | {
                      eyebrow?: string | null;
                      heading: string;
                      body?: string | null;
                      cta?: {
                        label?: string | null;
                        href?: string | null;
                      };
                      mediaTopRight?: (string | null) | Media;
                      mediaBottomLeft?: (string | null) | Media;
                      mediaBottomRight?: (string | null) | Media;
                      /**
                       * Adjust vertical parallax in percent of the element height. Negative moves up, positive moves down.
                       */
                      parallax?: {
                        topRight?: number | null;
                        bottomLeft?: number | null;
                        bottomRight?: number | null;
                      };
                      sectionId?: string | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'botique-intro';
                    }
                  | {
                      headingEyebrow?: string | null;
                      heading: string;
                      leftText?: string | null;
                      address?: string | null;
                      email?: string | null;
                      phone?: string | null;
                      form: string | Form;
                      sectionId?: string | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'boutique-contact';
                    }
                  | {
                      eyebrow?: string | null;
                      heading: string;
                      subheading?: string | null;
                      cta?: {
                        label?: string | null;
                        href?: string | null;
                      };
                      /**
                       * Add up to 4 rooms: Premium, Deluxe, Suite, Apartment
                       */
                      rooms?:
                        | {
                            title: string;
                            description?: string | null;
                            badges?:
                              | {
                                  text?: string | null;
                                  id?: string | null;
                                }[]
                              | null;
                            image: string | Media;
                            id?: string | null;
                          }[]
                        | null;
                      sectionId?: string | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'rooms';
                    }
                  | {
                      media: string | Media;
                      alt?: string | null;
                      caption?: string | null;
                      layout?: ('full' | 'contained') | null;
                      align?: ('left' | 'center' | 'right') | null;
                      sectionId?: string | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'image';
                    }
                  | {
                      heading: string;
                      images?:
                        | {
                            media: string | Media;
                            alt?: string | null;
                            caption?: string | null;
                            id?: string | null;
                          }[]
                        | null;
                      /**
                       * Higher = slower. Animation speeds up temporarily with scroll velocity.
                       */
                      baseDuration?: number | null;
                      sectionId?: string | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'rooftop';
                    }
                  | {
                      heading: string;
                      features?:
                        | {
                            icon?: string | null;
                            title: string;
                            description?: string | null;
                            id?: string | null;
                          }[]
                        | null;
                      sectionId?: string | null;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'rooftop-features';
                    }
                )[]
              | null;
            /**
             * Make this section take up the full viewport height
             */
            isFullHeight?: boolean | null;
            /**
             * Choose the container width for section content
             */
            container?: ('full' | 'container') | null;
            padding?: {
              top?: number | null;
              right?: number | null;
              bottom?: number | null;
              left?: number | null;
            };
            /**
             * CSS color value (e.g., #000000, rgb(0,0,0), black)
             */
            backgroundColor?: string | null;
            backgroundMedia?: {
              type?: ('none' | 'image' | 'video') | null;
              image?: (string | null) | Media;
              video?: (string | null) | Media;
              overlay?: ('none' | 'light' | 'medium' | 'dark') | null;
            };
            /**
             * Optional ID for this section (used for menu navigation)
             */
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'section';
          }
        | {
            heading: string;
            subheading?: string | null;
            backgroundMedia?: {
              type?: ('none' | 'image' | 'video') | null;
              image?: (string | null) | Media;
              video?: (string | null) | Media;
              overlay?: ('none' | 'light' | 'medium' | 'dark') | null;
            };
            /**
             * Optional ID for this section (used for menu navigation)
             */
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | {
            heading?: string | null;
            features?:
              | {
                  title?: string | null;
                  description?: string | null;
                  id?: string | null;
                }[]
              | null;
            /**
             * Optional ID for this section (used for menu navigation)
             */
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'features';
          }
        | {
            heading: string;
            content: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            /**
             * Optional ID for this section (used for menu navigation)
             */
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            columns?:
              | {
                  title: string;
                  subtitle?: string | null;
                  /**
                   * Optional background image for this column
                   */
                  backgroundImage?: (string | null) | Media;
                  /**
                   * Make this column take the full viewport height
                   */
                  fullHeight?: boolean | null;
                  /**
                   * Optional gradient overlay for this column
                   */
                  gradient?: {
                    enabled?: boolean | null;
                    type?: ('linear' | 'radial') | null;
                    direction?:
                      | (
                          | 'to-bottom'
                          | 'to-top'
                          | 'to-right'
                          | 'to-left'
                          | 'to-bottom-right'
                          | 'to-bottom-left'
                          | 'to-top-right'
                          | 'to-top-left'
                        )
                      | null;
                    position?:
                      | (
                          | 'center'
                          | 'top'
                          | 'bottom'
                          | 'left'
                          | 'right'
                          | 'top-left'
                          | 'top-right'
                          | 'bottom-left'
                          | 'bottom-right'
                        )
                      | null;
                    /**
                     * Hex color code (e.g., #000000)
                     */
                    startColor?: string | null;
                    /**
                     * Hex color code (e.g., #ffffff)
                     */
                    endColor?: string | null;
                    /**
                     * Gradient opacity (0 = transparent, 1 = opaque)
                     */
                    opacity?: number | null;
                  };
                  link: {
                    url: string;
                    text: string;
                    openInNewTab?: boolean | null;
                  };
                  /**
                   * Optional social network links for this column
                   */
                  socialNetworks?: {
                    /**
                     * Full Facebook profile or page URL
                     */
                    facebook?: string | null;
                    /**
                     * Full Instagram profile URL
                     */
                    instagram?: string | null;
                  };
                  id?: string | null;
                }[]
              | null;
            /**
             * Optional ID for this section (used for menu navigation)
             */
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'three-columns';
          }
        | {
            eyebrow?: string | null;
            heading: string;
            body?: string | null;
            cta?: {
              label?: string | null;
              href?: string | null;
            };
            mediaTopRight?: (string | null) | Media;
            mediaBottomLeft?: (string | null) | Media;
            mediaBottomRight?: (string | null) | Media;
            /**
             * Adjust vertical parallax in percent of the element height. Negative moves up, positive moves down.
             */
            parallax?: {
              topRight?: number | null;
              bottomLeft?: number | null;
              bottomRight?: number | null;
            };
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'botique-intro';
          }
        | {
            headingEyebrow?: string | null;
            heading: string;
            leftText?: string | null;
            address?: string | null;
            email?: string | null;
            phone?: string | null;
            form: string | Form;
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'boutique-contact';
          }
        | {
            eyebrow?: string | null;
            heading: string;
            subheading?: string | null;
            cta?: {
              label?: string | null;
              href?: string | null;
            };
            /**
             * Add up to 4 rooms: Premium, Deluxe, Suite, Apartment
             */
            rooms?:
              | {
                  title: string;
                  description?: string | null;
                  badges?:
                    | {
                        text?: string | null;
                        id?: string | null;
                      }[]
                    | null;
                  image: string | Media;
                  id?: string | null;
                }[]
              | null;
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'rooms';
          }
        | {
            heading: string;
            images?:
              | {
                  media: string | Media;
                  alt?: string | null;
                  caption?: string | null;
                  id?: string | null;
                }[]
              | null;
            /**
             * Higher = slower. Animation speeds up temporarily with scroll velocity.
             */
            baseDuration?: number | null;
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'rooftop';
          }
        | {
            heading: string;
            features?:
              | {
                  icon?: string | null;
                  title: string;
                  description?: string | null;
                  id?: string | null;
                }[]
              | null;
            sectionId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'rooftop-features';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage navigation menus for tenants and main domain
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "menu".
 */
export interface Menu {
  id: string;
  /**
   * Unique identifier for this menu type. Main Menu gets centered logo styling, Tenant Menu gets standard top-left styling.
   */
  identifier: 'main-menu' | 'tenant-menu';
  /**
   * Internal title for this menu (e.g., "Hotel ABC Menu", "Restaurant XYZ Menu")
   */
  title: string;
  tenant?: (string | null) | Tenant;
  menuItems?:
    | {
        label: string;
        /**
         * URL or path for this menu item (required even if using scroll target)
         */
        link: string;
        /**
         * Optional section ID to scroll to (e.g., "hero", "features"). Leave empty to use the link above.
         */
        scrollTarget?: string | null;
        external?: boolean | null;
        children?:
          | {
              label: string;
              /**
               * URL or path for this menu item (required even if using scroll target)
               */
              link: string;
              /**
               * Optional section ID to scroll to (e.g., "hero", "features"). Leave empty to use the link above.
               */
              scrollTarget?: string | null;
              external?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  logo?: (string | null) | Media;
  logoText?: string | null;
  /**
   * Choose how the menu should be positioned on the page
   */
  positioning?: ('fixed' | 'absolute' | 'relative') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage footer content for tenants and main domain
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  /**
   * Internal title for this footer (e.g., "Hotel ABC Footer", "Restaurant XYZ Footer")
   */
  title: string;
  tenant?: (string | null) | Tenant;
  columns?:
    | {
        title: string;
        links?:
          | {
              label: string;
              link: string;
              external?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  bottomSection?: {
    copyright?: string | null;
    socialLinks?:
      | {
          platform?: ('facebook' | 'twitter' | 'instagram' | 'linkedin' | 'youtube') | null;
          url: string;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'tenants';
        value: string | Tenant;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'menu';
        value: string | Menu;
      } | null)
    | ({
        relationTo: 'footer';
        value: string | Footer;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  tenant?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  tenant?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  subdomain?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  tenant?: T;
  layout?:
    | T
    | {
        section?:
          | T
          | {
              blocks?:
                | T
                | {
                    hero?:
                      | T
                      | {
                          heading?: T;
                          subheading?: T;
                          backgroundMedia?:
                            | T
                            | {
                                type?: T;
                                image?: T;
                                video?: T;
                                overlay?: T;
                              };
                          sectionId?: T;
                          id?: T;
                          blockName?: T;
                        };
                    features?:
                      | T
                      | {
                          heading?: T;
                          features?:
                            | T
                            | {
                                title?: T;
                                description?: T;
                                id?: T;
                              };
                          sectionId?: T;
                          id?: T;
                          blockName?: T;
                        };
                    text?:
                      | T
                      | {
                          heading?: T;
                          content?: T;
                          sectionId?: T;
                          id?: T;
                          blockName?: T;
                        };
                    'three-columns'?:
                      | T
                      | {
                          columns?:
                            | T
                            | {
                                title?: T;
                                subtitle?: T;
                                backgroundImage?: T;
                                fullHeight?: T;
                                gradient?:
                                  | T
                                  | {
                                      enabled?: T;
                                      type?: T;
                                      direction?: T;
                                      position?: T;
                                      startColor?: T;
                                      endColor?: T;
                                      opacity?: T;
                                    };
                                link?:
                                  | T
                                  | {
                                      url?: T;
                                      text?: T;
                                      openInNewTab?: T;
                                    };
                                socialNetworks?:
                                  | T
                                  | {
                                      facebook?: T;
                                      instagram?: T;
                                    };
                                id?: T;
                              };
                          sectionId?: T;
                          id?: T;
                          blockName?: T;
                        };
                    'botique-intro'?:
                      | T
                      | {
                          eyebrow?: T;
                          heading?: T;
                          body?: T;
                          cta?:
                            | T
                            | {
                                label?: T;
                                href?: T;
                              };
                          mediaTopRight?: T;
                          mediaBottomLeft?: T;
                          mediaBottomRight?: T;
                          parallax?:
                            | T
                            | {
                                topRight?: T;
                                bottomLeft?: T;
                                bottomRight?: T;
                              };
                          sectionId?: T;
                          id?: T;
                          blockName?: T;
                        };
                    'boutique-contact'?:
                      | T
                      | {
                          headingEyebrow?: T;
                          heading?: T;
                          leftText?: T;
                          address?: T;
                          email?: T;
                          phone?: T;
                          form?: T;
                          sectionId?: T;
                          id?: T;
                          blockName?: T;
                        };
                    rooms?:
                      | T
                      | {
                          eyebrow?: T;
                          heading?: T;
                          subheading?: T;
                          cta?:
                            | T
                            | {
                                label?: T;
                                href?: T;
                              };
                          rooms?:
                            | T
                            | {
                                title?: T;
                                description?: T;
                                badges?:
                                  | T
                                  | {
                                      text?: T;
                                      id?: T;
                                    };
                                image?: T;
                                id?: T;
                              };
                          sectionId?: T;
                          id?: T;
                          blockName?: T;
                        };
                    image?:
                      | T
                      | {
                          media?: T;
                          alt?: T;
                          caption?: T;
                          layout?: T;
                          align?: T;
                          sectionId?: T;
                          id?: T;
                          blockName?: T;
                        };
                    rooftop?:
                      | T
                      | {
                          heading?: T;
                          images?:
                            | T
                            | {
                                media?: T;
                                alt?: T;
                                caption?: T;
                                id?: T;
                              };
                          baseDuration?: T;
                          sectionId?: T;
                          id?: T;
                          blockName?: T;
                        };
                    'rooftop-features'?:
                      | T
                      | {
                          heading?: T;
                          features?:
                            | T
                            | {
                                icon?: T;
                                title?: T;
                                description?: T;
                                id?: T;
                              };
                          sectionId?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              isFullHeight?: T;
              container?: T;
              padding?:
                | T
                | {
                    top?: T;
                    right?: T;
                    bottom?: T;
                    left?: T;
                  };
              backgroundColor?: T;
              backgroundMedia?:
                | T
                | {
                    type?: T;
                    image?: T;
                    video?: T;
                    overlay?: T;
                  };
              sectionId?: T;
              id?: T;
              blockName?: T;
            };
        hero?:
          | T
          | {
              heading?: T;
              subheading?: T;
              backgroundMedia?:
                | T
                | {
                    type?: T;
                    image?: T;
                    video?: T;
                    overlay?: T;
                  };
              sectionId?: T;
              id?: T;
              blockName?: T;
            };
        features?:
          | T
          | {
              heading?: T;
              features?:
                | T
                | {
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              sectionId?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              heading?: T;
              content?: T;
              sectionId?: T;
              id?: T;
              blockName?: T;
            };
        'three-columns'?:
          | T
          | {
              columns?:
                | T
                | {
                    title?: T;
                    subtitle?: T;
                    backgroundImage?: T;
                    fullHeight?: T;
                    gradient?:
                      | T
                      | {
                          enabled?: T;
                          type?: T;
                          direction?: T;
                          position?: T;
                          startColor?: T;
                          endColor?: T;
                          opacity?: T;
                        };
                    link?:
                      | T
                      | {
                          url?: T;
                          text?: T;
                          openInNewTab?: T;
                        };
                    socialNetworks?:
                      | T
                      | {
                          facebook?: T;
                          instagram?: T;
                        };
                    id?: T;
                  };
              sectionId?: T;
              id?: T;
              blockName?: T;
            };
        'botique-intro'?:
          | T
          | {
              eyebrow?: T;
              heading?: T;
              body?: T;
              cta?:
                | T
                | {
                    label?: T;
                    href?: T;
                  };
              mediaTopRight?: T;
              mediaBottomLeft?: T;
              mediaBottomRight?: T;
              parallax?:
                | T
                | {
                    topRight?: T;
                    bottomLeft?: T;
                    bottomRight?: T;
                  };
              sectionId?: T;
              id?: T;
              blockName?: T;
            };
        'boutique-contact'?:
          | T
          | {
              headingEyebrow?: T;
              heading?: T;
              leftText?: T;
              address?: T;
              email?: T;
              phone?: T;
              form?: T;
              sectionId?: T;
              id?: T;
              blockName?: T;
            };
        rooms?:
          | T
          | {
              eyebrow?: T;
              heading?: T;
              subheading?: T;
              cta?:
                | T
                | {
                    label?: T;
                    href?: T;
                  };
              rooms?:
                | T
                | {
                    title?: T;
                    description?: T;
                    badges?:
                      | T
                      | {
                          text?: T;
                          id?: T;
                        };
                    image?: T;
                    id?: T;
                  };
              sectionId?: T;
              id?: T;
              blockName?: T;
            };
        rooftop?:
          | T
          | {
              heading?: T;
              images?:
                | T
                | {
                    media?: T;
                    alt?: T;
                    caption?: T;
                    id?: T;
                  };
              baseDuration?: T;
              sectionId?: T;
              id?: T;
              blockName?: T;
            };
        'rooftop-features'?:
          | T
          | {
              heading?: T;
              features?:
                | T
                | {
                    icon?: T;
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              sectionId?: T;
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "menu_select".
 */
export interface MenuSelect<T extends boolean = true> {
  identifier?: T;
  title?: T;
  tenant?: T;
  menuItems?:
    | T
    | {
        label?: T;
        link?: T;
        scrollTarget?: T;
        external?: T;
        children?:
          | T
          | {
              label?: T;
              link?: T;
              scrollTarget?: T;
              external?: T;
              id?: T;
            };
        id?: T;
      };
  logo?: T;
  logoText?: T;
  positioning?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  title?: T;
  tenant?: T;
  columns?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              label?: T;
              link?: T;
              external?: T;
              id?: T;
            };
        id?: T;
      };
  bottomSection?:
    | T
    | {
        copyright?: T;
        socialLinks?:
          | T
          | {
              platform?: T;
              url?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}